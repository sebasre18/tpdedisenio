#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.296
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TPdeDiseño
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TP-DISEÑO")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definiciones de métodos de extensibilidad
    partial void OnCreated();
    partial void InsertFixture(Fixture instance);
    partial void UpdateFixture(Fixture instance);
    partial void DeleteFixture(Fixture instance);
    partial void InsertParticipante(Participante instance);
    partial void UpdateParticipante(Participante instance);
    partial void DeleteParticipante(Participante instance);
    partial void InsertCompetenciaDeportiva(CompetenciaDeportiva instance);
    partial void UpdateCompetenciaDeportiva(CompetenciaDeportiva instance);
    partial void DeleteCompetenciaDeportiva(CompetenciaDeportiva instance);
    partial void InsertPartido_Participante(Partido_Participante instance);
    partial void UpdatePartido_Participante(Partido_Participante instance);
    partial void DeletePartido_Participante(Partido_Participante instance);
    partial void InsertRonda(Ronda instance);
    partial void UpdateRonda(Ronda instance);
    partial void DeleteRonda(Ronda instance);
    partial void InsertPartido(Partido instance);
    partial void UpdatePartido(Partido instance);
    partial void DeletePartido(Partido instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::TPdeDiseño.Properties.Settings.Default.TP_DISEÑOConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Fixture> Fixture
		{
			get
			{
				return this.GetTable<Fixture>();
			}
		}
		
		public System.Data.Linq.Table<Participante> Participante
		{
			get
			{
				return this.GetTable<Participante>();
			}
		}
		
		public System.Data.Linq.Table<CompetenciaDeportiva> CompetenciaDeportiva
		{
			get
			{
				return this.GetTable<CompetenciaDeportiva>();
			}
		}
		
		public System.Data.Linq.Table<Partido_Participante> Partido_Participante
		{
			get
			{
				return this.GetTable<Partido_Participante>();
			}
		}
		
		public System.Data.Linq.Table<Ronda> Ronda
		{
			get
			{
				return this.GetTable<Ronda>();
			}
		}
		
		public System.Data.Linq.Table<Partido> Partido
		{
			get
			{
				return this.GetTable<Partido>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Fixture")]
	public partial class Fixture : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _id_fixture;
		
		private System.Data.Linq.Binary _eliminado;
		
		private System.Nullable<short> _id_ronda_actual;
		
		private short _id_competencia;
		
		private EntitySet<Ronda> _Ronda;
		
		private EntityRef<CompetenciaDeportiva> _CompetenciaDeportiva;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_fixtureChanging(short value);
    partial void Onid_fixtureChanged();
    partial void OneliminadoChanging(System.Data.Linq.Binary value);
    partial void OneliminadoChanged();
    partial void Onid_ronda_actualChanging(System.Nullable<short> value);
    partial void Onid_ronda_actualChanged();
    partial void Onid_competenciaChanging(short value);
    partial void Onid_competenciaChanged();
    #endregion
		
		public Fixture()
		{
			this._Ronda = new EntitySet<Ronda>(new Action<Ronda>(this.attach_Ronda), new Action<Ronda>(this.detach_Ronda));
			this._CompetenciaDeportiva = default(EntityRef<CompetenciaDeportiva>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_fixture", DbType="SmallInt NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public short id_fixture
		{
			get
			{
				return this._id_fixture;
			}
			set
			{
				if ((this._id_fixture != value))
				{
					this.Onid_fixtureChanging(value);
					this.SendPropertyChanging();
					this._id_fixture = value;
					this.SendPropertyChanged("id_fixture");
					this.Onid_fixtureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eliminado", DbType="Binary(50)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary eliminado
		{
			get
			{
				return this._eliminado;
			}
			set
			{
				if ((this._eliminado != value))
				{
					this.OneliminadoChanging(value);
					this.SendPropertyChanging();
					this._eliminado = value;
					this.SendPropertyChanged("eliminado");
					this.OneliminadoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_ronda_actual", DbType="SmallInt")]
		public System.Nullable<short> id_ronda_actual
		{
			get
			{
				return this._id_ronda_actual;
			}
			set
			{
				if ((this._id_ronda_actual != value))
				{
					this.Onid_ronda_actualChanging(value);
					this.SendPropertyChanging();
					this._id_ronda_actual = value;
					this.SendPropertyChanged("id_ronda_actual");
					this.Onid_ronda_actualChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_competencia", DbType="SmallInt NOT NULL")]
		public short id_competencia
		{
			get
			{
				return this._id_competencia;
			}
			set
			{
				if ((this._id_competencia != value))
				{
					if (this._CompetenciaDeportiva.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_competenciaChanging(value);
					this.SendPropertyChanging();
					this._id_competencia = value;
					this.SendPropertyChanged("id_competencia");
					this.Onid_competenciaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Fixture_Ronda", Storage="_Ronda", ThisKey="id_fixture", OtherKey="id_fixture")]
		public EntitySet<Ronda> Ronda
		{
			get
			{
				return this._Ronda;
			}
			set
			{
				this._Ronda.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompetenciaDeportiva_Fixture", Storage="_CompetenciaDeportiva", ThisKey="id_competencia", OtherKey="id_competencia", IsForeignKey=true)]
		public CompetenciaDeportiva CompetenciaDeportiva
		{
			get
			{
				return this._CompetenciaDeportiva.Entity;
			}
			set
			{
				CompetenciaDeportiva previousValue = this._CompetenciaDeportiva.Entity;
				if (((previousValue != value) 
							|| (this._CompetenciaDeportiva.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompetenciaDeportiva.Entity = null;
						previousValue.Fixture.Remove(this);
					}
					this._CompetenciaDeportiva.Entity = value;
					if ((value != null))
					{
						value.Fixture.Add(this);
						this._id_competencia = value.id_competencia;
					}
					else
					{
						this._id_competencia = default(short);
					}
					this.SendPropertyChanged("CompetenciaDeportiva");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ronda(Ronda entity)
		{
			this.SendPropertyChanging();
			entity.Fixture = this;
		}
		
		private void detach_Ronda(Ronda entity)
		{
			this.SendPropertyChanging();
			entity.Fixture = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Participante")]
	public partial class Participante : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _id_participante;
		
		private string _nombre;
		
		private string _e_mail;
		
		private string _imagen;
		
		private System.Data.Linq.Binary _perdido;
		
		private System.Data.Linq.Binary _eliminado;
		
		private System.Nullable<short> _id_competencia;
		
		private EntitySet<Partido_Participante> _Partido_Participante;
		
		private EntitySet<Ronda> _Ronda;
		
		private EntityRef<CompetenciaDeportiva> _CompetenciaDeportiva;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_participanteChanging(short value);
    partial void Onid_participanteChanged();
    partial void OnnombreChanging(string value);
    partial void OnnombreChanged();
    partial void One_mailChanging(string value);
    partial void One_mailChanged();
    partial void OnimagenChanging(string value);
    partial void OnimagenChanged();
    partial void OnperdidoChanging(System.Data.Linq.Binary value);
    partial void OnperdidoChanged();
    partial void OneliminadoChanging(System.Data.Linq.Binary value);
    partial void OneliminadoChanged();
    partial void Onid_competenciaChanging(System.Nullable<short> value);
    partial void Onid_competenciaChanged();
    #endregion
		
		public Participante()
		{
			this._Partido_Participante = new EntitySet<Partido_Participante>(new Action<Partido_Participante>(this.attach_Partido_Participante), new Action<Partido_Participante>(this.detach_Partido_Participante));
			this._Ronda = new EntitySet<Ronda>(new Action<Ronda>(this.attach_Ronda), new Action<Ronda>(this.detach_Ronda));
			this._CompetenciaDeportiva = default(EntityRef<CompetenciaDeportiva>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_participante", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short id_participante
		{
			get
			{
				return this._id_participante;
			}
			set
			{
				if ((this._id_participante != value))
				{
					this.Onid_participanteChanging(value);
					this.SendPropertyChanging();
					this._id_participante = value;
					this.SendPropertyChanged("id_participante");
					this.Onid_participanteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nombre", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string nombre
		{
			get
			{
				return this._nombre;
			}
			set
			{
				if ((this._nombre != value))
				{
					this.OnnombreChanging(value);
					this.SendPropertyChanging();
					this._nombre = value;
					this.SendPropertyChanged("nombre");
					this.OnnombreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[e-mail]", Storage="_e_mail", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string e_mail
		{
			get
			{
				return this._e_mail;
			}
			set
			{
				if ((this._e_mail != value))
				{
					this.One_mailChanging(value);
					this.SendPropertyChanging();
					this._e_mail = value;
					this.SendPropertyChanged("e_mail");
					this.One_mailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imagen", DbType="NVarChar(50)")]
		public string imagen
		{
			get
			{
				return this._imagen;
			}
			set
			{
				if ((this._imagen != value))
				{
					this.OnimagenChanging(value);
					this.SendPropertyChanging();
					this._imagen = value;
					this.SendPropertyChanged("imagen");
					this.OnimagenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_perdido", DbType="Binary(50)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary perdido
		{
			get
			{
				return this._perdido;
			}
			set
			{
				if ((this._perdido != value))
				{
					this.OnperdidoChanging(value);
					this.SendPropertyChanging();
					this._perdido = value;
					this.SendPropertyChanged("perdido");
					this.OnperdidoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eliminado", DbType="Binary(50)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary eliminado
		{
			get
			{
				return this._eliminado;
			}
			set
			{
				if ((this._eliminado != value))
				{
					this.OneliminadoChanging(value);
					this.SendPropertyChanging();
					this._eliminado = value;
					this.SendPropertyChanged("eliminado");
					this.OneliminadoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_competencia", DbType="SmallInt")]
		public System.Nullable<short> id_competencia
		{
			get
			{
				return this._id_competencia;
			}
			set
			{
				if ((this._id_competencia != value))
				{
					if (this._CompetenciaDeportiva.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_competenciaChanging(value);
					this.SendPropertyChanging();
					this._id_competencia = value;
					this.SendPropertyChanged("id_competencia");
					this.Onid_competenciaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Participante_Partido_Participante", Storage="_Partido_Participante", ThisKey="id_participante", OtherKey="id_participante")]
		public EntitySet<Partido_Participante> Partido_Participante
		{
			get
			{
				return this._Partido_Participante;
			}
			set
			{
				this._Partido_Participante.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Participante_Ronda", Storage="_Ronda", ThisKey="id_participante", OtherKey="id_libre")]
		public EntitySet<Ronda> Ronda
		{
			get
			{
				return this._Ronda;
			}
			set
			{
				this._Ronda.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompetenciaDeportiva_Participante", Storage="_CompetenciaDeportiva", ThisKey="id_competencia", OtherKey="id_competencia", IsForeignKey=true)]
		public CompetenciaDeportiva CompetenciaDeportiva
		{
			get
			{
				return this._CompetenciaDeportiva.Entity;
			}
			set
			{
				CompetenciaDeportiva previousValue = this._CompetenciaDeportiva.Entity;
				if (((previousValue != value) 
							|| (this._CompetenciaDeportiva.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompetenciaDeportiva.Entity = null;
						previousValue.Participante.Remove(this);
					}
					this._CompetenciaDeportiva.Entity = value;
					if ((value != null))
					{
						value.Participante.Add(this);
						this._id_competencia = value.id_competencia;
					}
					else
					{
						this._id_competencia = default(Nullable<short>);
					}
					this.SendPropertyChanged("CompetenciaDeportiva");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Partido_Participante(Partido_Participante entity)
		{
			this.SendPropertyChanging();
			entity.Participante = this;
		}
		
		private void detach_Partido_Participante(Partido_Participante entity)
		{
			this.SendPropertyChanging();
			entity.Participante = null;
		}
		
		private void attach_Ronda(Ronda entity)
		{
			this.SendPropertyChanging();
			entity.Participante = this;
		}
		
		private void detach_Ronda(Ronda entity)
		{
			this.SendPropertyChanging();
			entity.Participante = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompetenciaDeportiva")]
	public partial class CompetenciaDeportiva : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _id_competencia;
		
		private string _Reglamento;
		
		private string _Estado;
		
		private System.Nullable<System.DateTime> _fecha_baja;
		
		private System.Data.Linq.Binary _eliminado;
		
		private string _e_mail_usuario;
		
		private short _id_deporte;
		
		private short _id_modalidad;
		
		private EntitySet<Fixture> _Fixture;
		
		private EntitySet<Participante> _Participante;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_competenciaChanging(short value);
    partial void Onid_competenciaChanged();
    partial void OnReglamentoChanging(string value);
    partial void OnReglamentoChanged();
    partial void OnEstadoChanging(string value);
    partial void OnEstadoChanged();
    partial void Onfecha_bajaChanging(System.Nullable<System.DateTime> value);
    partial void Onfecha_bajaChanged();
    partial void OneliminadoChanging(System.Data.Linq.Binary value);
    partial void OneliminadoChanged();
    partial void One_mail_usuarioChanging(string value);
    partial void One_mail_usuarioChanged();
    partial void Onid_deporteChanging(short value);
    partial void Onid_deporteChanged();
    partial void Onid_modalidadChanging(short value);
    partial void Onid_modalidadChanged();
    #endregion
		
		public CompetenciaDeportiva()
		{
			this._Fixture = new EntitySet<Fixture>(new Action<Fixture>(this.attach_Fixture), new Action<Fixture>(this.detach_Fixture));
			this._Participante = new EntitySet<Participante>(new Action<Participante>(this.attach_Participante), new Action<Participante>(this.detach_Participante));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_competencia", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short id_competencia
		{
			get
			{
				return this._id_competencia;
			}
			set
			{
				if ((this._id_competencia != value))
				{
					this.Onid_competenciaChanging(value);
					this.SendPropertyChanging();
					this._id_competencia = value;
					this.SendPropertyChanged("id_competencia");
					this.Onid_competenciaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reglamento", DbType="NVarChar(MAX)")]
		public string Reglamento
		{
			get
			{
				return this._Reglamento;
			}
			set
			{
				if ((this._Reglamento != value))
				{
					this.OnReglamentoChanging(value);
					this.SendPropertyChanging();
					this._Reglamento = value;
					this.SendPropertyChanged("Reglamento");
					this.OnReglamentoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Estado", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Estado
		{
			get
			{
				return this._Estado;
			}
			set
			{
				if ((this._Estado != value))
				{
					this.OnEstadoChanging(value);
					this.SendPropertyChanging();
					this._Estado = value;
					this.SendPropertyChanged("Estado");
					this.OnEstadoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fecha_baja", DbType="Date")]
		public System.Nullable<System.DateTime> fecha_baja
		{
			get
			{
				return this._fecha_baja;
			}
			set
			{
				if ((this._fecha_baja != value))
				{
					this.Onfecha_bajaChanging(value);
					this.SendPropertyChanging();
					this._fecha_baja = value;
					this.SendPropertyChanged("fecha_baja");
					this.Onfecha_bajaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eliminado", DbType="Binary(50)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary eliminado
		{
			get
			{
				return this._eliminado;
			}
			set
			{
				if ((this._eliminado != value))
				{
					this.OneliminadoChanging(value);
					this.SendPropertyChanging();
					this._eliminado = value;
					this.SendPropertyChanged("eliminado");
					this.OneliminadoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[e-mail_usuario]", Storage="_e_mail_usuario", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string e_mail_usuario
		{
			get
			{
				return this._e_mail_usuario;
			}
			set
			{
				if ((this._e_mail_usuario != value))
				{
					this.One_mail_usuarioChanging(value);
					this.SendPropertyChanging();
					this._e_mail_usuario = value;
					this.SendPropertyChanged("e_mail_usuario");
					this.One_mail_usuarioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_deporte", DbType="SmallInt NOT NULL")]
		public short id_deporte
		{
			get
			{
				return this._id_deporte;
			}
			set
			{
				if ((this._id_deporte != value))
				{
					this.Onid_deporteChanging(value);
					this.SendPropertyChanging();
					this._id_deporte = value;
					this.SendPropertyChanged("id_deporte");
					this.Onid_deporteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_modalidad", DbType="SmallInt NOT NULL")]
		public short id_modalidad
		{
			get
			{
				return this._id_modalidad;
			}
			set
			{
				if ((this._id_modalidad != value))
				{
					this.Onid_modalidadChanging(value);
					this.SendPropertyChanging();
					this._id_modalidad = value;
					this.SendPropertyChanged("id_modalidad");
					this.Onid_modalidadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompetenciaDeportiva_Fixture", Storage="_Fixture", ThisKey="id_competencia", OtherKey="id_competencia")]
		public EntitySet<Fixture> Fixture
		{
			get
			{
				return this._Fixture;
			}
			set
			{
				this._Fixture.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompetenciaDeportiva_Participante", Storage="_Participante", ThisKey="id_competencia", OtherKey="id_competencia")]
		public EntitySet<Participante> Participante
		{
			get
			{
				return this._Participante;
			}
			set
			{
				this._Participante.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Fixture(Fixture entity)
		{
			this.SendPropertyChanging();
			entity.CompetenciaDeportiva = this;
		}
		
		private void detach_Fixture(Fixture entity)
		{
			this.SendPropertyChanging();
			entity.CompetenciaDeportiva = null;
		}
		
		private void attach_Participante(Participante entity)
		{
			this.SendPropertyChanging();
			entity.CompetenciaDeportiva = this;
		}
		
		private void detach_Participante(Participante entity)
		{
			this.SendPropertyChanging();
			entity.CompetenciaDeportiva = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Partido_Participante")]
	public partial class Partido_Participante : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _id_partido;
		
		private short _id_participante;
		
		private short _id;
		
		private EntityRef<Participante> _Participante;
		
		private EntityRef<Partido> _Partido;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_partidoChanging(short value);
    partial void Onid_partidoChanged();
    partial void Onid_participanteChanging(short value);
    partial void Onid_participanteChanged();
    partial void OnidChanging(short value);
    partial void OnidChanged();
    #endregion
		
		public Partido_Participante()
		{
			this._Participante = default(EntityRef<Participante>);
			this._Partido = default(EntityRef<Partido>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_partido", DbType="SmallInt NOT NULL")]
		public short id_partido
		{
			get
			{
				return this._id_partido;
			}
			set
			{
				if ((this._id_partido != value))
				{
					if (this._Partido.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_partidoChanging(value);
					this.SendPropertyChanging();
					this._id_partido = value;
					this.SendPropertyChanged("id_partido");
					this.Onid_partidoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_participante", DbType="SmallInt NOT NULL")]
		public short id_participante
		{
			get
			{
				return this._id_participante;
			}
			set
			{
				if ((this._id_participante != value))
				{
					if (this._Participante.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_participanteChanging(value);
					this.SendPropertyChanging();
					this._id_participante = value;
					this.SendPropertyChanged("id_participante");
					this.Onid_participanteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Participante_Partido_Participante", Storage="_Participante", ThisKey="id_participante", OtherKey="id_participante", IsForeignKey=true)]
		public Participante Participante
		{
			get
			{
				return this._Participante.Entity;
			}
			set
			{
				Participante previousValue = this._Participante.Entity;
				if (((previousValue != value) 
							|| (this._Participante.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Participante.Entity = null;
						previousValue.Partido_Participante.Remove(this);
					}
					this._Participante.Entity = value;
					if ((value != null))
					{
						value.Partido_Participante.Add(this);
						this._id_participante = value.id_participante;
					}
					else
					{
						this._id_participante = default(short);
					}
					this.SendPropertyChanged("Participante");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Partido_Partido_Participante", Storage="_Partido", ThisKey="id_partido", OtherKey="id_partido", IsForeignKey=true)]
		public Partido Partido
		{
			get
			{
				return this._Partido.Entity;
			}
			set
			{
				Partido previousValue = this._Partido.Entity;
				if (((previousValue != value) 
							|| (this._Partido.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Partido.Entity = null;
						previousValue.Partido_Participante.Remove(this);
					}
					this._Partido.Entity = value;
					if ((value != null))
					{
						value.Partido_Participante.Add(this);
						this._id_partido = value.id_partido;
					}
					else
					{
						this._id_partido = default(short);
					}
					this.SendPropertyChanged("Partido");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ronda")]
	public partial class Ronda : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _nro_ronda;
		
		private short _id_fixture;
		
		private System.Data.Linq.Binary _ronda_perdedores;
		
		private System.Nullable<short> _id_libre;
		
		private short _id_ronda;
		
		private EntitySet<Partido> _Partido;
		
		private EntityRef<Fixture> _Fixture;
		
		private EntityRef<Participante> _Participante;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onnro_rondaChanging(short value);
    partial void Onnro_rondaChanged();
    partial void Onid_fixtureChanging(short value);
    partial void Onid_fixtureChanged();
    partial void Onronda_perdedoresChanging(System.Data.Linq.Binary value);
    partial void Onronda_perdedoresChanged();
    partial void Onid_libreChanging(System.Nullable<short> value);
    partial void Onid_libreChanged();
    partial void Onid_rondaChanging(short value);
    partial void Onid_rondaChanged();
    #endregion
		
		public Ronda()
		{
			this._Partido = new EntitySet<Partido>(new Action<Partido>(this.attach_Partido), new Action<Partido>(this.detach_Partido));
			this._Fixture = default(EntityRef<Fixture>);
			this._Participante = default(EntityRef<Participante>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nro_ronda", DbType="SmallInt NOT NULL")]
		public short nro_ronda
		{
			get
			{
				return this._nro_ronda;
			}
			set
			{
				if ((this._nro_ronda != value))
				{
					this.Onnro_rondaChanging(value);
					this.SendPropertyChanging();
					this._nro_ronda = value;
					this.SendPropertyChanged("nro_ronda");
					this.Onnro_rondaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_fixture", DbType="SmallInt NOT NULL")]
		public short id_fixture
		{
			get
			{
				return this._id_fixture;
			}
			set
			{
				if ((this._id_fixture != value))
				{
					if (this._Fixture.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_fixtureChanging(value);
					this.SendPropertyChanging();
					this._id_fixture = value;
					this.SendPropertyChanged("id_fixture");
					this.Onid_fixtureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ronda_perdedores", DbType="Binary(50)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary ronda_perdedores
		{
			get
			{
				return this._ronda_perdedores;
			}
			set
			{
				if ((this._ronda_perdedores != value))
				{
					this.Onronda_perdedoresChanging(value);
					this.SendPropertyChanging();
					this._ronda_perdedores = value;
					this.SendPropertyChanged("ronda_perdedores");
					this.Onronda_perdedoresChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_libre", DbType="SmallInt")]
		public System.Nullable<short> id_libre
		{
			get
			{
				return this._id_libre;
			}
			set
			{
				if ((this._id_libre != value))
				{
					if (this._Participante.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_libreChanging(value);
					this.SendPropertyChanging();
					this._id_libre = value;
					this.SendPropertyChanged("id_libre");
					this.Onid_libreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_ronda", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short id_ronda
		{
			get
			{
				return this._id_ronda;
			}
			set
			{
				if ((this._id_ronda != value))
				{
					this.Onid_rondaChanging(value);
					this.SendPropertyChanging();
					this._id_ronda = value;
					this.SendPropertyChanged("id_ronda");
					this.Onid_rondaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ronda_Partido", Storage="_Partido", ThisKey="nro_ronda", OtherKey="id_ronda")]
		public EntitySet<Partido> Partido
		{
			get
			{
				return this._Partido;
			}
			set
			{
				this._Partido.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Fixture_Ronda", Storage="_Fixture", ThisKey="id_fixture", OtherKey="id_fixture", IsForeignKey=true)]
		public Fixture Fixture
		{
			get
			{
				return this._Fixture.Entity;
			}
			set
			{
				Fixture previousValue = this._Fixture.Entity;
				if (((previousValue != value) 
							|| (this._Fixture.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Fixture.Entity = null;
						previousValue.Ronda.Remove(this);
					}
					this._Fixture.Entity = value;
					if ((value != null))
					{
						value.Ronda.Add(this);
						this._id_fixture = value.id_fixture;
					}
					else
					{
						this._id_fixture = default(short);
					}
					this.SendPropertyChanged("Fixture");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Participante_Ronda", Storage="_Participante", ThisKey="id_libre", OtherKey="id_participante", IsForeignKey=true)]
		public Participante Participante
		{
			get
			{
				return this._Participante.Entity;
			}
			set
			{
				Participante previousValue = this._Participante.Entity;
				if (((previousValue != value) 
							|| (this._Participante.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Participante.Entity = null;
						previousValue.Ronda.Remove(this);
					}
					this._Participante.Entity = value;
					if ((value != null))
					{
						value.Ronda.Add(this);
						this._id_libre = value.id_participante;
					}
					else
					{
						this._id_libre = default(Nullable<short>);
					}
					this.SendPropertyChanged("Participante");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Partido(Partido entity)
		{
			this.SendPropertyChanging();
			entity.Ronda = this;
		}
		
		private void detach_Partido(Partido entity)
		{
			this.SendPropertyChanging();
			entity.Ronda = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Partido")]
	public partial class Partido : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _id_partido;
		
		private System.Nullable<short> _id_ronda;
		
		private System.Nullable<short> _id_lugar;
		
		private EntitySet<Partido_Participante> _Partido_Participante;
		
		private EntityRef<Ronda> _Ronda;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_partidoChanging(short value);
    partial void Onid_partidoChanged();
    partial void Onid_rondaChanging(System.Nullable<short> value);
    partial void Onid_rondaChanged();
    partial void Onid_lugarChanging(System.Nullable<short> value);
    partial void Onid_lugarChanged();
    #endregion
		
		public Partido()
		{
			this._Partido_Participante = new EntitySet<Partido_Participante>(new Action<Partido_Participante>(this.attach_Partido_Participante), new Action<Partido_Participante>(this.detach_Partido_Participante));
			this._Ronda = default(EntityRef<Ronda>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_partido", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short id_partido
		{
			get
			{
				return this._id_partido;
			}
			set
			{
				if ((this._id_partido != value))
				{
					this.Onid_partidoChanging(value);
					this.SendPropertyChanging();
					this._id_partido = value;
					this.SendPropertyChanged("id_partido");
					this.Onid_partidoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_ronda", DbType="SmallInt")]
		public System.Nullable<short> id_ronda
		{
			get
			{
				return this._id_ronda;
			}
			set
			{
				if ((this._id_ronda != value))
				{
					if (this._Ronda.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_rondaChanging(value);
					this.SendPropertyChanging();
					this._id_ronda = value;
					this.SendPropertyChanged("id_ronda");
					this.Onid_rondaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_lugar", DbType="SmallInt")]
		public System.Nullable<short> id_lugar
		{
			get
			{
				return this._id_lugar;
			}
			set
			{
				if ((this._id_lugar != value))
				{
					this.Onid_lugarChanging(value);
					this.SendPropertyChanging();
					this._id_lugar = value;
					this.SendPropertyChanged("id_lugar");
					this.Onid_lugarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Partido_Partido_Participante", Storage="_Partido_Participante", ThisKey="id_partido", OtherKey="id_partido")]
		public EntitySet<Partido_Participante> Partido_Participante
		{
			get
			{
				return this._Partido_Participante;
			}
			set
			{
				this._Partido_Participante.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ronda_Partido", Storage="_Ronda", ThisKey="id_ronda", OtherKey="nro_ronda", IsForeignKey=true, DeleteRule="CASCADE")]
		public Ronda Ronda
		{
			get
			{
				return this._Ronda.Entity;
			}
			set
			{
				Ronda previousValue = this._Ronda.Entity;
				if (((previousValue != value) 
							|| (this._Ronda.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ronda.Entity = null;
						previousValue.Partido.Remove(this);
					}
					this._Ronda.Entity = value;
					if ((value != null))
					{
						value.Partido.Add(this);
						this._id_ronda = value.nro_ronda;
					}
					else
					{
						this._id_ronda = default(Nullable<short>);
					}
					this.SendPropertyChanged("Ronda");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Partido_Participante(Partido_Participante entity)
		{
			this.SendPropertyChanging();
			entity.Partido = this;
		}
		
		private void detach_Partido_Participante(Partido_Participante entity)
		{
			this.SendPropertyChanging();
			entity.Partido = null;
		}
	}
}
#pragma warning restore 1591
